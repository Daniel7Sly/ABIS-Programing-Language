block main do
    println "EMEM"
end

proc is_even in num number out bool is 
    iff ((number % 2) == 0) else
    rtn true
    else:
    rtn false
end

struct amam is

end
_________________________________________________

proc main in num a out text do
    # EMEMEMEME
    giv a ( a * a )
    return "a"
end



proc main in num a out text do
    giv a ( a * a )
    return "a"
end


_________________________________________________



proc sum_of in num x num y out num is
    var num rslt
    giv rslt ( x + y )
    rtn rslt
end

proc main is
    var num a giv a 20
    var num b giv b 10
    giv $a @sum_of $a $b
    giv $a ( $a + $a )
    println "aaa asda asdasd asd as asd"
    println $a
end

proc assert in bool expr is 
    ifn expr crash
    rtn
    crash: stp
end


_________________________________________________


   proc assert in bool expr is "adas asdasd dd a adf asdas das ad sad" 
     ifn expr crash
     rtn
    crash: stp
end